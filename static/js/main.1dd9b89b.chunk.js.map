{"version":3,"sources":["views/prelanding.js","App.js","serviceWorker.js","index.js"],"names":["PreLanding","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCameraDevices","asyncToGenerator","regenerator_default","a","mark","_callee","nativeDevices","videoDevices","wrap","_context","prev","next","navigator","mediaDevices","enumerateDevices","sent","filter","device","kind","abrupt","stop","onInputSelect","e","args","setState","selectedDevice","target","value","playVideo","_callee2","deviceAvaliable","videoPlayer","videoConstraints","constraints","_context2","videoStream","current","state","console","log","sources","facingMode","deviceId","exact","width","height","video","audio","getUserMedia","then","stream","srcObject","play","capturePicture","canvas","getContext","drawImage","toBlob","blob","url","URL","createObjectURL","datablob","toDataURL","imgUrl","React","createRef","captureImage","bind","assertThisInitialized","imageTag","optionItems","_this$state","react_default","createElement","src","className","alt","map","key","groupId","label","disabled","class","ref","autoPlay","preload","onClick","Component","App","prelanding","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1dd9b89b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport '../styles/landing.scss'\n\nclass PreLanding extends Component {\n  constructor() {\n    super()\n    this.state = {}\n    this.videoStream = React.createRef()\n    this.captureImage = React.createRef()\n    this.canvas = React.createRef()\n    // this.imagePreview = React.createRef()\n    this.capturePicture = this.capturePicture.bind(this)\n    this.onInputSelect = this.onInputSelect.bind(this)\n  }\n\n  componentDidMount() {\n    this.playVideo()\n  }\n\n  getCameraDevices = async () => {\n    const nativeDevices = await navigator.mediaDevices.enumerateDevices()\n    const videoDevices = nativeDevices.filter(\n      device => device.kind === 'videoinput'\n    )\n    return videoDevices\n  }\n\n  onInputSelect = (e, args) => {\n    this.setState({ selectedDevice: e.target.value })\n    this.playVideo()\n  }\n\n  playVideo = async () => {\n    let deviceAvaliable = await this.getCameraDevices()\n    const videoPlayer = this.videoStream.current\n    const { selectedDevice } = this.state\n    console.log(selectedDevice, 'selectedDevice')\n\n    if (deviceAvaliable) {\n      this.setState({ sources: deviceAvaliable })\n\n      // let devices = deviceAvaliable.map(dev => {\n      //   return dev.deviceId\n      // })\n      const videoConstraints = {}\n      if (selectedDevice === '' || typeof selectedDevice === 'undefined') {\n        videoConstraints.facingMode = 'environment'\n      } else {\n        videoConstraints.deviceId = { exact: selectedDevice }\n        videoConstraints.width = 400\n        videoConstraints.height = 600\n      }\n\n      const constraints = {\n        video: videoConstraints,\n        audio: false\n      }\n      console.log(videoConstraints)\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {\n          videoPlayer.srcObject = stream\n          videoPlayer.play()\n        })\n      }\n    }\n  }\n  capturePicture = () => {\n    const context = this.canvas.current.getContext('2d')\n    context.drawImage(this.videoStream.current, 0, 0, 640, 360)\n    this.canvas.current.toBlob(blob => {\n      const url = URL.createObjectURL(blob)\n      console.log(blob, 'blob')\n      console.log(url)\n      const datablob = this.canvas.current.toDataURL()\n      this.setState({ imgUrl: datablob })\n    })\n  }\n\n  render() {\n    const { imgUrl, sources } = this.state\n    // let sources = ''\n    let imageTag\n    if (imgUrl) {\n      imageTag = <img src={imgUrl} className=\"imagePreview\" alt=\"description\" />\n    } else {\n      imageTag = <p>not captured</p>\n    }\n    let optionItems\n    if (sources) {\n      optionItems = sources.map(device => (\n        <option key={device.groupId} value={device.deviceId}>\n          {device.label}\n        </option>\n      ))\n    } else {\n      optionItems = (\n        <option value=\"volvo\" disabled>\n          No Camera Device Found\n        </option>\n      )\n    }\n\n    return (\n      <div className=\"AppContainer\">\n        <div className=\"video--container\">\n          <div className=\"overlay--container\">\n            <div class=\"top left\" />\n            <div class=\"top right\" />\n            <div class=\"bottom right\" />\n            <div class=\"bottom left\" />\n          </div>\n          <video ref={this.videoStream} autoPlay preload=\"none\" />\n        </div>\n        <button\n          ref={this.captureImage}\n          onClick={this.capturePicture}\n          className=\"capture\"\n        >\n          Capture\n        </button>\n\n        <canvas ref={this.canvas} width=\"640\" height=\"480\" className=\"hidden\" />\n        {imageTag}\n\n        <select value={this.state.value} onClick={this.onInputSelect}>\n          {optionItems}\n        </select>\n      </div>\n    )\n  }\n}\nexport default PreLanding\n","import React, { Component } from 'react'\n// import NameCard from './views/landing'\nimport PreLanding from './views/prelanding'\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {}\n  }\n\n  render () {\n    return (\n      <div className='AppContainer'>\n        <PreLanding />\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}